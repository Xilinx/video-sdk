.. _using-job-slot-reservations:

The Job Slot Reservation Tool
==================================

The job slot reservation application takes as input a :ref:`JSON job description <job-descriptions-files>`. The JSON job description file provides information to the resource manager about what kind of transcode is intended to run on the card. With this information the resource manager calculates the CU load for the specified job as well as the maximum possible number of jobs that can be run real-time in parallel. 

Once the maximum possible number of jobs is known, CUs and job slots are reserved, and corresponding reservation IDs are stored in a bash file at ``/var/tmp/xilinx/xrm_jobReservation.sh``. A reservation ID is a unique identifier which is valid while the job slot reservation application is running. These reservation IDs are passed to individual FFmpeg or GStreamer processes via the :envvar:`XRM_RESERVE_ID` environment variable. The FFmpeg or GStreamer processes then use this reservation ID to retrieve and use the corresponding CUs reserved by the job slot reservation tool.

If the job is split across two devices (by declaring an "additionalresources_1" section in the JSON job description), the ``xrm_jobReservation.sh`` file will also declare additional identifier for each of the two devices used by the job. These identifiers should be used with the :option:`-lxlnx_hwdev` FFmpeg option or the :option:`dev-idx` GStreamer option in when running the process.

The reserved resourced are released by ending the job reservation process. Reserved slots can be reused after an FFmpeg or GStreamer job finishes as long as the job reservation process is still running.

The `source code of the job slot reservation application <https://github.com/Xilinx/app-jobslot-reservation-xrm/blob/U30_GA_2/jobSlot_reservation.cpp>`_ is included in the Github repository of |SDK| and can be used as a starting point for developing custom orchestration layers. 

.. rubric:: Ill-formed JSON Job Descriptions

If you run the :program:`jobSlotReservation` tool with a syntactically incorrect JSON description, you will see the following messages::

  decoder plugin function=0 fail to run the function
  scaler plugin function=0 fail to run the function
  encoder plugin function=0 fail to run the function

This indicates that the job description is ill-formed and needs to be corrected.


Example requiring a single device per job 
-----------------------------------------

This example uses the ``/opt/xilinx/launcher/scripts/describe_job/describe_job.json`` file describing a 1080p ABR ladder running on a single device.

#. Setup the environment::

    source /opt/xilinx/xcdr/setup.sh

#. Run the job slot reservation application with the desired JSON job description. For example::

    jobSlotReservation /opt/xilinx/launcher/scripts/describe_job/describe_job.json

    For describe_job.json, the possible number of job slots available = 8 
    -------------------------------------------------------------------------------------- 
    The Job_slot_reservations are alive as long as this application is alive! 
    (press Enter to end) 
    --------------------------------------------------------------------------------------

   The job slot reservation application creates a ``/var/tmp/xilinx/xrm_jobReservation.sh`` with :envvar:`XRM_RESERVE_ID_{n}` set to unique IDs generated by XRM (with n ranging from 1 to the number of possible job slots for the given job). Here is an example of this generated file::

    export XRM_RESERVE_ID_1=9 
    export XRM_RESERVE_ID_2=10 
    export XRM_RESERVE_ID_3=11 
    export XRM_RESERVE_ID_4=12 
    export XRM_RESERVE_ID_5=13 
    export XRM_RESERVE_ID_6=14 
    export XRM_RESERVE_ID_7=15 
    export XRM_RESERVE_ID_8=16

#. Launch individual FFmpeg processes in distinct shells after sourcing the ``/var/tmp/xilinx/xrm_jobReservation.sh`` file and setting :envvar:`XRM_RESERVE_ID` environment to a unique :envvar:`XRM_RESERVE_ID_{n}`. 

   For job 1, within a new terminal::

    source /var/tmp/xilinx/xrm_jobReservation.sh 
    export XRM_RESERVE_ID=${XRM_RESERVE_ID_1} 
    ffmpeg -c:v mpsoc_vcu_h264 ...

   For job 2, within a new terminal::

    source /var/tmp/xilinx/xrm_jobReservation.sh 
    export XRM_RESERVE_ID=${XRM_RESERVE_ID_2} 
    ffmpeg -c:v mpsoc_vcu_h264 ...

   And so forth for the other jobs.

#. Press **Enter** in the job reservation app terminal to release the resources after the jobs are complete.


Example requiring two devices per job 
-------------------------------------

This example uses the ``/opt/xilinx/launcher/scripts/describe_job/testjob_4k_2dev.json`` file describing a 4K ABR ladder split across two devices.

#. Setup the environment::

    source /opt/xilinx/xcdr/setup.sh

#. Run the job slot reservation application with the desired JSON job description. For example::

    jobSlotReservation /opt/xilinx/launcher/scripts/describe_job/testjob_4k_2dev.json

    For describe_job.json, the possible number of job slots available = 2 
    -------------------------------------------------------------------------------------- 
    The Job_slot_reservations are alive as long as this application is alive! 
    (press Enter to end) 
    --------------------------------------------------------------------------------------

   The job slot reservation application creates a ``/var/tmp/xilinx/xrm_jobReservation.sh`` with XRM_RESERVE_ID_{n} set to unique IDs generated by XRM (with n ranging from 1 to the number of possible job slots for the given job). The file also sets :envvar:`var_dev_{n}_0` and :envvar:`var_dev_{n}_1` variables indicating, for each job {n}, the identifiers of the two devices which should be used. Here is an example of this generated file::

        export XRM_RESERVE_ID_1=3
        var_dev_1_0=0
        var_dev_1_1=1

        export XRM_RESERVE_ID_2=4
        var_dev_2_0=2
        var_dev_2_1=1


#. Launch individual FFmpeg processes in distinct shells after sourcing the ``/var/tmp/xilinx/xrm_jobReservation.sh`` file and setting :envvar:`XRM_RESERVE_ID` environment to a unique :envvar:`XRM_RESERVE_ID_{n}`. The use :envvar:`$var_dev_{n}_0` and :envvar:`$var_dev_{n}_1` as values for the :option:`-lxlnx_hwdev` options on the FFmpeg command line.

   For job 1, within a new terminal::

    source /var/tmp/xilinx/xrm_jobReservation.sh 
    export XRM_RESERVE_ID=${XRM_RESERVE_ID_1} 
    ffmpeg -lxlnx_hwdev ${var_dev_1_0} -c:v mpsoc_vcu_h264 ... -lxlnx_hwdev ${var_dev_1_1} -c:v mpsoc_vcu_h264 -f mp4  ...

   For job 2, within a new terminal::

    source /var/tmp/xilinx/xrm_jobReservation.sh 
    export XRM_RESERVE_ID=${XRM_RESERVE_ID_2} 
    ffmpeg -lxlnx_hwdev ${var_dev_2_0} -c:v mpsoc_vcu_h264 ... -lxlnx_hwdev ${var_dev_2_1} -c:v mpsoc_vcu_h264 -f mp4  ...

   And so forth for the other jobs.

#. Press **Enter** in the job reservation app terminal to release the resources after the jobs are complete.


..
  ------------
  
  Â© Copyright 2020-2023, Advanced Micro Devices, Inc.
  
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.